ChatBot uses plugins to provide the features that it can do.  The core ChatBot
program just logs into a Jabber server, and joins the channels that it finds
in the channel.xml file.  All other commands and behavior come from plugins.

This file describes how to write a plugin, and lists the API that is available
inside the plugins.


Start
-----
  First pick a name for your plugin.  For the logging plugin, I picked "log".
Next create a file in the plugin directory with the name plus ".pl" (log.pl).
This is how ChatBot know what to load from that directory.

  If your plugin needs initialization for finalization call
&RegisterPlugin with the following hash structure as argument:

name =>      the name of the plugin (must be filename without .pl)
init =>      pointer to init handler (called when plugin is loaeded)
terminate => pointer to terminate handler (called when plugin is unloaded)

Events
------
  ChatBot is now an event driven client.  Sprinkled throughout the code are
various triggers to signify that an event has occured.  Some of the initial
events are "gorupchat_message", "presence_available", etc...  You can write
functions that will get called when those events occur, and get passed in
correpsonding arguments for that event.  Here is the list of current events:

  startup
  groupchat_message
  chat_message
  presence
  presence_available
  presence_unavailable
  presence_error
  garbage_collect

Commands
--------
  You can also register commands, which ChatBot will recognize when you use
them at the beginning of a <body/>.  A command looks like this:

  <body>COMMAND ARGS</body>

It is important that you pick command names carefully.  Use the "lc" command
to list the current commands, and try not pick a command that has any chance
of being used in the normal course of conversation in the channel, like "hi".

Timing Events
-------------
  ChatBot has a timing event loop now.  You can schedule functions to be called
at any unix time.  While it mihgt not get called exactly when you want, it
will be called within 10 seconds or so of that time.

Flags
-----
  You can register a new flag, which each channel can toggle to control if
your commands/features are used in a channel.  You should check the flag in
all of your functions so that code and data is not accessed when its not
going to be used in the channel.

API
---
  There are several functions that ChatBot defines that you can use to access
data about channels, users, etc.  Please use them, and do *NOT* access the data
directly.  If there is some piece of data that you need access to that is not
provided, contact me and let me know.  I'll write a wrapper function to
abstract it for your code.


RegisterEvent(event,handler)

  Register the handler with the given event.  Different events pass your
funciton different arguemnts.  Here's a list of the arguments for each
event:

  startup               - none
  add_channel           - (pointer to channel hash)
  groupchat_message     - (Net::Jabber::Message object)
  chat_message          - (Net::Jabber::Message object)
  presence              - (Net::Jabber::Presence object)
  presence_available    - (Net::Jabber::Presence object)
  presence_unavailable  - (Net::Jabber::Presence object)
  presence_error        - (Net::Jabber::Presence object)
  garbage_collect       - none

    &RegisterEvent("groupchat_message",\&plugin_log_log);


RegisterTimingEvent(time,id,handler,args)

  Register the handler at the given time, marked with id.  The args are
passed to your handler, useful for scheduling a generic function, and
controlling the behavior via arguments.

  &RegisterTimingEvent(991852734,
                       "hush-jdev@conference.jabber.org",
                       \&plugin_hush_wakeup,
                       "jdev@conference.jabber.org");


ClearTimingEvent(id)

  Removes all events that have the given id.  Useful if you want to cancel
a given event and you marked it with a relaly specific id.


ChatBotNick(channel)

  Returns the nick that ChatBot is using in the given channel.

  &ChatBotNick("jdev@conference.jabber.org") => "ChatBot"


Channels()

  Returns an array with all of the current channels.


CurrentUsers(channel)

  Returns an array with the current users on-line in that channel.


CurrentUser(channel,nick)

  Returns 1 if a user with "nick" is currently on-line in the "channel".


RegisterCommand(command=>command,
	        alias=>alias,
                usage=>usage,
                desc=>desc,
                examples=>array of examples)

  Register a command, and tell ChatBot about it so that it can report them
back for help.  Pick a command name and alias that are not going to be common
phrases seen at the beginning of a string.

  &RegisterCommand(command=>"!query",
                   alias=>"??",
                   handler=>\&plugin_query_query,
                   desc=>"Return the value for the requested key. NOTE: The
                          space in between the command and the key is VERY
                          important.",
                   usage=>"<password> \"<key>\" <value>",
                   examples=>["foo","bar"]);


RegisterFlag(flag)

  Tell ChatBot that the flag is available for every channel to toggle.


CheckFlag(channel,flag)

  Returns 1 if the flag is set for the channel, 0 otherwise.


ToggleFlag(channel,flag)

  Toggle the setting for the flag in the channel.

Flags()

  Returns a list of all of the registered flags.



Author's Note
-------------
  This is new, so it's going to be poorly documented and probably broken. =)
I'm sure someone will think of new events to add, and new access functions
for the API.  Feel free to contact me at reatmon@jabber.org and let me know
what you need.  I'll be glad to add it.

Have fun.

